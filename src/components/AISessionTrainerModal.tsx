import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Modal,
  TouchableOpacity,
  TextInput,
  ScrollView,
  ActivityIndicator,
  Alert,
  KeyboardAvoidingView,
  Platform,
  SafeAreaView,
  Dimensions,
} from 'react-native';
import { colors, spacing, typography } from '../styles';
import { assignmentService } from '../services/api/assignmentService';
import { CourseAssignment } from '../types/assignments';
import { FormattedText } from './FormattedText';

interface Message {
  id: string;
  content: string;
  sender: 'mentor' | 'mentee';
  timestamp: Date;
  type: 'text' | 'system';
}

interface AISessionTrainerModalProps {
  isOpen: boolean;
  onClose: () => void;
  assignment: CourseAssignment;
  courseId: number;
  onSubmissionSuccess?: () => void;
}

export const AISessionTrainerModal: React.FC<AISessionTrainerModalProps> = ({
  isOpen,
  onClose,
  assignment,
  courseId,
  onSubmissionSuccess,
}) => {
  const [expertise, setExpertise] = useState('');
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [caseGenerated, setCaseGenerated] = useState(false);
  const [sessionStarted, setSessionStarted] = useState(false);
  const [currentStage, setCurrentStage] = useState(0);
  const [mentorNotes, setMentorNotes] = useState('');
  const [sessionSummary, setSessionSummary] = useState('');
  
  const messagesEndRef = useRef<ScrollView>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollToEnd({ animated: true });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
  useEffect(() => {
    if (isOpen) {
      resetSession();
    }
  }, [isOpen]);

  const resetSession = () => {
    setMessages([]);
    setInputMessage('');
    setExpertise('');
    setCaseGenerated(false);
    setSessionStarted(false);
    setCurrentStage(0);
    setMentorNotes('');
    setSessionSummary('');
  };

  const generateCase = async () => {
    if (!expertise.trim()) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É');
      return;
    }

    setIsLoading(true);
    try {
      // –°–æ–∑–¥–∞–µ–º –∫–µ–π—Å —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç—É - AI-–º–µ–Ω—Ç–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –º–µ–Ω—Ç–æ—Ä–∞
      const context = `–¢—ã - –ò–ò-–º–µ–Ω—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∫–µ–π—Å –¥–ª—è –º–µ–Ω—Ç–æ—Ä—Å–∫–æ–π —Å–µ—Å—Å–∏–∏.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –º–µ–Ω—Ç–æ—Ä–∞: "${expertise}"

–¢—ã –î–û–õ–ñ–ï–ù —Å–æ–∑–¥–∞—Ç—å –∫–µ–π—Å (5-7 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–æ–π –º–µ–Ω—Ç–æ—Ä–∞ "${expertise}". 
–ù–ï —Å–æ–∑–¥–∞–≤–∞–π –∫–µ–π—Å—ã –ø—Ä–æ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤, –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ç–µ–º—ã - —Ç–æ–ª—å–∫–æ –ø—Ä–æ "${expertise}"!

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–µ–π—Å–∞:
- –ö—Ç–æ —è (—Ä–æ–ª—å/–∫–æ–Ω—Ç–µ–∫—Å—Ç, 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ) - —Ä–∞–±–æ—Ç–∞—é –≤ –æ–±–ª–∞—Å—Ç–∏ "${expertise}"
- –°–∏–º–ø—Ç–æ–º/–∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –≤ "${expertise}"
- –ñ–µ–ª–∞–Ω–∏–µ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É (—á—Ç–æ —Ö–æ—á—É –ø—Ä–æ—è—Å–Ω–∏—Ç—å/–¥–æ—Å—Ç–∏—á—å —Å–µ–≥–æ–¥–Ω—è) - —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å "${expertise}"
- –ù–ï —É–∫–∞–∑—ã–≤–∞–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è/—Ä–∏—Å–∫–∏, –µ—Å–ª–∏ –ú–µ–Ω—Ç–æ—Ä —ç—Ç–æ–≥–æ –Ω–µ —Å–ø—Ä–æ—Å–∏–ª
- –¢–æ–Ω ¬´—Å–∫–æ—Ä–µ–µ –æ–±—â–æ¬ª, –±–µ–∑ –≥–æ—Ç–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π

–¶–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–∑–º—ã—Ç–æ–π, —á—Ç–æ–±—ã –º–µ–Ω—Ç–æ—Ä –º–æ–≥ –µ–µ —É—Ç–æ—á–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å–∞–º–∏.
–ö–µ–π—Å –î–û–õ–ñ–ï–ù –±—ã—Ç—å –¢–û–õ–¨–ö–û –≤ –æ–±–ª–∞—Å—Ç–∏ "${expertise}"! –ù–ï —Å–æ–∑–¥–∞–≤–∞–π –∫–µ–π—Å—ã –ø—Ä–æ –¥—Ä—É–≥–∏–µ —Ç–µ–º—ã!`;

      // –î–æ–±–∞–≤–ª—è–µ–º placeholder –¥–ª—è –æ—Ç–≤–µ—Ç–∞ AI
      const caseMessage: Message = {
        id: 'case-' + Date.now(),
        content: '',
        sender: 'mentee',
        timestamp: new Date(),
        type: 'text'
      };
      setMessages([caseMessage]);

      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API
      console.log('üöÄ Starting case generation with expertise:', expertise);
      const fullResponse = await assignmentService.generateCase(courseId, assignment.id, expertise);

      console.log('‚úÖ Response received:', fullResponse);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
      setMessages(prev => prev.map(msg => 
        msg.id === caseMessage.id 
          ? { ...msg, content: `–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–µ–π, –∏ —É –º–µ–Ω—è –µ—Å—Ç—å —Å–∏—Ç—É–∞—Ü–∏—è, —Å –∫–æ—Ç–æ—Ä–æ–π —è –Ω–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è. –í–æ—Ç —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:\n\n${fullResponse}` }
          : msg
      ));

      setCaseGenerated(true);
      setSessionStarted(true);
      setCurrentStage(0); // –ù–∞—á–∏–Ω–∞–µ–º —Å CLARIFY_GOAL

      Alert.alert('–ö–µ–π—Å —Å–æ–∑–¥–∞–Ω', '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –º–µ–Ω—Ç–æ—Ä—Å–∫—É—é —Å–µ—Å—Å–∏—é');

    } catch (error) {
      console.error('Error generating case:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–µ–π—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isLoading || !sessionStarted) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content: inputMessage,
      sender: 'mentor',
      timestamp: new Date(),
      type: 'text',
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);

    try {
      // –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –±—ç–∫–µ–Ω–¥–µ

      // –î–æ–±–∞–≤–ª—è–µ–º placeholder –¥–ª—è –æ—Ç–≤–µ—Ç–∞ AI
      const menteeMessage: Message = {
        id: 'mentee-' + Date.now(),
        content: '',
        sender: 'mentee',
        timestamp: new Date(),
        type: 'text'
      };
      setMessages(prev => [...prev, menteeMessage]);

      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API
      const fullResponse = await assignmentService.generateAIResponse(
        courseId, 
        assignment.id, 
        inputMessage, 
        messages
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
      setMessages(prev => prev.map(msg => 
        msg.id === menteeMessage.id 
          ? { ...msg, content: fullResponse }
          : msg
      ));

      console.log('‚úÖ AI response received, checking stage progress:', {
        currentStage,
        messagesCount: messages.length,
        responseLength: fullResponse.length
      });

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
      if (messages.length >= 4 && currentStage < 2) {
        setCurrentStage(prev => prev + 1);
        console.log('üîÑ Auto-advancing to next stage:', currentStage + 1);
      }

    } catch (error) {
      console.error('Error sending message:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsLoading(false);
    }
  };

  const completeSession = async () => {
    setIsLoading(true);

    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const submissionData = {
        conversationData: messages,
        sessionSummary,
        mentorNotes,
        expertise,
        completedStages: currentStage + 1,
        totalStages: 3 // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç—Ç–∞–ø—ã: CLARIFY_GOAL, SOLUTION_SEARCH, WRAP_UP
      };

      console.log('üì§ Submitting AI Session Trainer:', submissionData);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Å—Å–∏–∏
      await assignmentService.submitAISessionTrainerAssignment(courseId, assignment.id, submissionData);
      
      Alert.alert('–£—Å–ø–µ—Ö', '–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
      
      // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
      if (onSubmissionSuccess) {
        onSubmissionSuccess();
      }
      
      onClose();
    } catch (error) {
      console.error('Error submitting session:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <Modal
      visible={isOpen}
      animationType="slide"
      presentationStyle="pageSheet"
      onRequestClose={onClose}
    >
      <SafeAreaView style={styles.container}>
        <KeyboardAvoidingView 
          style={styles.flex} 
          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        >
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <View style={styles.header}>
            <TouchableOpacity onPress={onClose} style={styles.closeButton}>
              <Text style={styles.closeButtonText}>‚úï</Text>
            </TouchableOpacity>
            <Text style={styles.title}>AI-—Ç—Ä–µ–Ω–∞–∂—ë—Ä —Å–µ—Å—Å–∏–∏</Text>
            <TouchableOpacity onPress={resetSession} style={styles.resetButton}>
              <Text style={styles.resetButtonText}>–°–±—Ä–æ—Å–∏—Ç—å</Text>
            </TouchableOpacity>
          </View>

          <View style={styles.content}>
            {!sessionStarted ? (
              /* –ù–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω */
              <View style={styles.startScreen}>
                <Text style={styles.startTitle}>–ù–∞—á–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</Text>
                <Text style={styles.startDescription}>
                  –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –æ–±–ª–∞—Å—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã, –∏ –ò–ò —Å–æ–∑–¥–∞—Å—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∫–µ–π—Å –¥–ª—è –º–µ–Ω—Ç–æ—Ä—Å–∫–æ–π —Å–µ—Å—Å–∏–∏
                </Text>
                
                <TextInput
                  style={styles.expertiseInput}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏..."
                  value={expertise}
                  onChangeText={setExpertise}
                  multiline
                  numberOfLines={3}
                  textAlignVertical="top"
                />

                <TouchableOpacity
                  style={[styles.startButton, (!expertise.trim() || isLoading) && styles.startButtonDisabled]}
                  onPress={generateCase}
                  disabled={!expertise.trim() || isLoading}
                >
                  {isLoading ? (
                    <ActivityIndicator color={colors.white} />
                  ) : (
                    <Text style={styles.startButtonText}>–°–æ–∑–¥–∞—Ç—å –∫–µ–π—Å</Text>
                  )}
                </TouchableOpacity>
              </View>
            ) : (
              /* –ß–∞—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å */
              <View style={styles.chatContainer}>
                {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
                <ScrollView
                  ref={messagesEndRef}
                  style={styles.messagesContainer}
                  contentContainerStyle={styles.messagesContent}
                >
                  {messages.map((message) => (
                    <View
                      key={message.id}
                      style={[
                        styles.messageContainer,
                        message.sender === 'mentor' ? styles.mentorMessage : styles.menteeMessage,
                        message.type === 'system' && styles.systemMessage,
                      ]}
                    >
                      <Text style={[
                        styles.messageText,
                        message.sender === 'mentor' ? styles.mentorMessageText : styles.menteeMessageText,
                        message.type === 'system' && styles.systemMessageText,
                      ]}>
                        <FormattedText text={message.content} />
                      </Text>
                      <Text style={styles.messageTime}>
                        {message.timestamp.toLocaleTimeString()}
                      </Text>
                    </View>
                  ))}
                  
                  {isLoading && (
                    <View style={styles.loadingContainer}>
                      <ActivityIndicator size="small" color={colors.primary} />
                      <Text style={styles.loadingText}>–ò–ò –ø–µ—á–∞—Ç–∞–µ—Ç...</Text>
                    </View>
                  )}
                </ScrollView>

                {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
                <View style={styles.inputContainer}>
                  <TextInput
                    style={styles.textInput}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                    value={inputMessage}
                    onChangeText={setInputMessage}
                    multiline
                    maxLength={1000}
                    editable={!isLoading}
                  />
                  <TouchableOpacity
                    style={[styles.sendButton, (!inputMessage.trim() || isLoading) && styles.sendButtonDisabled]}
                    onPress={handleSendMessage}
                    disabled={!inputMessage.trim() || isLoading}
                  >
                    <Text style={styles.sendButtonText}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</Text>
                  </TouchableOpacity>
                </View>

                {/* –ó–∞–º–µ—Ç–∫–∏ –º–µ–Ω—Ç–æ—Ä–∞ */}
                <View style={styles.notesContainer}>
                  <Text style={styles.notesTitle}>–ó–∞–º–µ—Ç–∫–∏ –æ —Å–µ—Å—Å–∏–∏:</Text>
                  <TextInput
                    style={styles.notesInput}
                    placeholder="–î–æ–±–∞–≤—å—Ç–µ –∑–∞–º–µ—Ç–∫–∏ –æ —Ç–æ–º, –∫–∞–∫ –ø—Ä–æ—à–ª–∞ —Å–µ—Å—Å–∏—è..."
                    value={mentorNotes}
                    onChangeText={setMentorNotes}
                    multiline
                    numberOfLines={3}
                    textAlignVertical="top"
                  />
                </View>

                {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è */}
                <TouchableOpacity
                  style={[styles.completeButton, isLoading && styles.completeButtonDisabled]}
                  onPress={completeSession}
                  disabled={isLoading}
                >
                  {isLoading ? (
                    <ActivityIndicator color={colors.white} />
                  ) : (
                    <Text style={styles.completeButtonText}>–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç</Text>
                  )}
                </TouchableOpacity>
              </View>
            )}
          </View>
        </KeyboardAvoidingView>
      </SafeAreaView>
    </Modal>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background,
  },
  flex: {
    flex: 1,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: spacing.md,
    paddingVertical: spacing.sm,
    borderBottomWidth: 1,
    borderBottomColor: colors.border,
    backgroundColor: colors.white,
  },
  closeButton: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: colors.gray[100],
    alignItems: 'center',
    justifyContent: 'center',
  },
  closeButtonText: {
    fontSize: 16,
    color: colors.gray[600],
  },
  title: {
    fontSize: 18,
    fontWeight: '600',
    color: colors.text.primary,
  },
  resetButton: {
    paddingHorizontal: spacing.sm,
    paddingVertical: spacing.xs,
    backgroundColor: colors.gray[100],
    borderRadius: 6,
  },
  resetButtonText: {
    fontSize: 14,
    color: colors.gray[600],
  },
  content: {
    flex: 1,
  },
  startScreen: {
    flex: 1,
    padding: spacing.lg,
    justifyContent: 'center',
  },
  startTitle: {
    fontSize: 24,
    fontWeight: '700',
    color: colors.text.primary,
    textAlign: 'center',
    marginBottom: spacing.sm,
  },
  startDescription: {
    fontSize: 16,
    color: colors.text.secondary,
    textAlign: 'center',
    marginBottom: spacing.xl,
    lineHeight: 24,
  },
  expertiseInput: {
    borderWidth: 1,
    borderColor: colors.border,
    borderRadius: 8,
    padding: spacing.md,
    fontSize: 16,
    backgroundColor: colors.white,
    marginBottom: spacing.lg,
    minHeight: 80,
  },
  startButton: {
    backgroundColor: colors.primary,
    paddingVertical: spacing.md,
    paddingHorizontal: spacing.lg,
    borderRadius: 8,
    alignItems: 'center',
  },
  startButtonDisabled: {
    backgroundColor: colors.gray[300],
  },
  startButtonText: {
    color: colors.white,
    fontSize: 16,
    fontWeight: '600',
  },
  chatContainer: {
    flex: 1,
  },
  messagesContainer: {
    flex: 1,
    backgroundColor: colors.background,
  },
  messagesContent: {
    padding: spacing.md,
  },
  messageContainer: {
    marginBottom: spacing.sm,
    maxWidth: '80%',
  },
  mentorMessage: {
    alignSelf: 'flex-end',
    backgroundColor: colors.primary,
    borderRadius: 12,
    padding: spacing.sm,
  },
  menteeMessage: {
    alignSelf: 'flex-start',
    backgroundColor: colors.white,
    borderRadius: 12,
    padding: spacing.sm,
    borderWidth: 1,
    borderColor: colors.border,
  },
  systemMessage: {
    alignSelf: 'center',
    backgroundColor: colors.blue[50],
    borderRadius: 8,
    padding: spacing.sm,
    maxWidth: '90%',
  },
  messageText: {
    fontSize: 16,
    lineHeight: 22,
  },
  mentorMessageText: {
    color: colors.white,
  },
  menteeMessageText: {
    color: colors.text.primary,
  },
  systemMessageText: {
    color: colors.blue[700],
    textAlign: 'center',
    fontWeight: '500',
  },
  messageTime: {
    fontSize: 12,
    color: colors.text.secondary,
    marginTop: spacing.xs,
  },
  loadingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: spacing.md,
  },
  loadingText: {
    marginLeft: spacing.sm,
    color: colors.text.secondary,
    fontSize: 14,
  },
  inputContainer: {
    padding: spacing.md,
    backgroundColor: colors.white,
    borderTopWidth: 1,
    borderTopColor: colors.border,
  },
  textInput: {
    borderWidth: 1,
    borderColor: colors.border,
    borderRadius: 8,
    paddingHorizontal: spacing.md,
    paddingVertical: spacing.sm,
    fontSize: 16,
    backgroundColor: colors.white,
    marginBottom: spacing.sm,
    minHeight: 50,
  },
  sendButton: {
    backgroundColor: colors.primary,
    paddingVertical: spacing.md,
    paddingHorizontal: spacing.lg,
    borderRadius: 8,
    alignItems: 'center',
    justifyContent: 'center',
  },
  sendButtonDisabled: {
    backgroundColor: colors.gray[300],
  },
  sendButtonText: {
    color: colors.white,
    fontSize: 16,
    fontWeight: '600',
  },
  notesContainer: {
    padding: spacing.md,
    backgroundColor: colors.gray[50],
    borderTopWidth: 1,
    borderTopColor: colors.border,
  },
  notesTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: colors.text.primary,
    marginBottom: spacing.sm,
  },
  notesInput: {
    borderWidth: 1,
    borderColor: colors.border,
    borderRadius: 8,
    padding: spacing.sm,
    fontSize: 14,
    backgroundColor: colors.white,
    minHeight: 60,
  },
  completeButton: {
    backgroundColor: colors.green[600],
    paddingVertical: spacing.md,
    paddingHorizontal: spacing.lg,
    margin: spacing.md,
    borderRadius: 8,
    alignItems: 'center',
  },
  completeButtonDisabled: {
    backgroundColor: colors.gray[300],
  },
  completeButtonText: {
    color: colors.white,
    fontSize: 16,
    fontWeight: '600',
  },
});