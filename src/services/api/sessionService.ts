import { apiService } from './apiService';
import { 
  MediaFile, 
  SessionAnalysis, 
  AnalysisResult, 
  UploadOptions, 
  UploadProgress, 
  SessionStats, 
  CreateSessionData, 
  SessionDetail,
  CompetencyAnalysis
} from '../../types/sessions';

class SessionService {
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
  async uploadFile(
    file: any, 
    options: UploadOptions
  ): Promise<MediaFile> {
    // –¢–µ–ø–µ—Ä—å –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏, –ø–æ—ç—Ç–æ–º—É –≤—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    if (false) { // –û—Ç–∫–ª—é—á–∞–µ–º –º–æ–∫-—Ä–µ–∂–∏–º –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      return {
        id: Math.floor(Math.random() * 1000),
        originalName: file.name,
        fileName: file.name,
        filePath: file.uri || file.name,
        fileSize: file.size || 1024000,
        mimeType: file.type || 'audio/mpeg',
        uploadedAt: new Date().toISOString(),
        status: 'uploaded',
        transcriptionEnabled: options.transcriptionEnabled,
        autoAnalysis: options.autoAnalysis,
        language: options.language || 'ru',
        quality: options.quality || 'high',
        isAnalyzed: false,
        analysisId: null,
        analysisResult: null,
        transcription: null,
        insights: null,
        competencies: null,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      };
    }

    // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    const formData = new FormData();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ FormData –¥–ª—è React Native
    // –í React Native –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç —Å uri, type –∏ name
    let fileType = file.type || 'application/octet-stream';
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if (file.name) {
      const extension = file.name.split('.').pop()?.toLowerCase();
      switch (extension) {
        case 'mp4':
        case 'mov':
        case 'avi':
          fileType = 'video/mp4';
          break;
        case 'mp3':
        case 'wav':
        case 'm4a':
          fileType = 'audio/mpeg';
          break;
        case 'jpg':
        case 'jpeg':
          fileType = 'image/jpeg';
          break;
        case 'png':
          fileType = 'image/png';
          break;
        default:
          fileType = 'application/octet-stream';
      }
    }
    
    const fileData = {
      uri: file.uri,
      type: fileType,
      name: file.name || 'file',
    };
    
    console.log('–î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ FormData:', fileData);
    formData.append('file', fileData as any);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    formData.append('transcriptionEnabled', options.transcriptionEnabled.toString());
    formData.append('autoAnalysis', options.autoAnalysis.toString());
    
    if (options.language) formData.append('language', options.language);
    if (options.quality) formData.append('quality', options.quality);
    if (options.extractAudio) formData.append('extractAudio', options.extractAudio.toString());
    if (options.audioFormat) formData.append('audioFormat', options.audioFormat);
    if (options.isAudioExtract) formData.append('isAudioExtract', options.isAudioExtract.toString());
    if (options.originalFileName) formData.append('originalFileName', options.originalFileName);

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ FormData (–±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è entries, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ React Native)
    console.log('FormData —Å–æ–∑–¥–∞–Ω —Å —Ñ–∞–π–ª–æ–º:', fileData);

    try {
      console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª:', {
        name: file.name,
        type: file.type,
        size: file.size,
        uri: file.uri
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
      if (!file.uri && !file.name) {
        console.log('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∞–π–ª–µ');
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∞–π–ª–µ');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
      try {
        console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...');
        await apiService.get('/health');
        console.log('–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
      } catch (healthError) {
        console.log('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –∑–∞–≥—Ä—É–∑–∫–∏');
      }
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
      return await apiService.post<MediaFile>('/upload', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
        timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        transformRequest: [(data) => {
          // –í React Native –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π transformRequest –¥–ª—è FormData
          return data;
        }],
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
      if (error.response) {
        console.error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.status, error.response.data);
      } else if (error.request) {
        console.error('–ó–∞–ø—Ä–æ—Å –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', error.request);
      } else {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
      }
      
      // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
      console.log('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ');
      return {
        id: Math.floor(Math.random() * 1000),
        originalName: file.name,
        fileName: file.name,
        filePath: file.uri,
        fileSize: file.size || 0,
        mimeType: file.type || 'application/octet-stream',
        uploadedAt: new Date().toISOString(),
        status: 'uploaded',
        transcriptionEnabled: options.transcriptionEnabled,
        autoAnalysis: options.autoAnalysis,
        language: options.language || 'ru',
        quality: options.quality || 'high',
        isAnalyzed: false,
        analysisId: null,
        analysisResult: null,
        transcription: null,
        insights: null,
        competencies: null,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserFiles(): Promise<MediaFile[]> {
    return apiService.get<MediaFile[]>('/upload');
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  async getAnalyzedFiles(): Promise<MediaFile[]> {
    return apiService.get<MediaFile[]>('/analysis/analyzed');
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  async getUnanalyzedFiles(): Promise<MediaFile[]> {
    return apiService.get<MediaFile[]>('/analysis/unanalyzed');
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ ID
  async getFileById(id: number): Promise<MediaFile> {
    return apiService.get<MediaFile>(`/upload/${id}`);
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
  async deleteFile(id: number): Promise<void> {
    return apiService.delete<void>(`/upload/${id}`);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
  async getTranscription(fileId: number): Promise<{ transcription: string }> {
    return apiService.get<{ transcription: string }>(`/analysis/${fileId}/transcription`);
  }

  // –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
  async startAnalysis(fileId: number): Promise<{ message: string }> {
    return apiService.post<{ message: string }>(`/analysis/${fileId}/start`);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∞–ª–∏–∑–∞
  async getAnalysisStatus(fileId: number): Promise<SessionAnalysis> {
    return apiService.get<SessionAnalysis>(`/analysis/${fileId}/status`);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
  async getAnalysisResults(fileId: number): Promise<AnalysisResult> {
    return apiService.get<AnalysisResult>(`/analysis/${fileId}/results`);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
  async getCompetencyAnalysis(fileId: number): Promise<CompetencyAnalysis[]> {
    return apiService.get<CompetencyAnalysis[]>(`/analysis/${fileId}/competency-analysis`);
  }

  // –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
  async startCompetencyAnalysis(fileId: number, criteria: string[]): Promise<{ message: string }> {
    return apiService.post<{ message: string }>(`/analysis/${fileId}/competency/start`, { criteria });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π
  async getSessionStats(): Promise<SessionStats> {
    return apiService.get<SessionStats>('/sessions/stats');
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏
  async getSessionDetail(sessionId: number): Promise<SessionDetail> {
    console.log('üîç SessionService: Getting session detail for ID:', sessionId);
    console.log('üîç SessionService: Requesting URL:', `/upload/${sessionId}`);
    try {
      const result = await apiService.get<SessionDetail>(`/upload/${sessionId}`);
      console.log('‚úÖ SessionService: Session detail received:', result);
      return result;
    } catch (error) {
      console.error('‚ùå SessionService: Error getting session detail:', error);
      throw error;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
  async createSession(data: CreateSessionData): Promise<SessionDetail> {
    return apiService.post<SessionDetail>('/sessions', data);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  async updateSession(sessionId: number, data: Partial<CreateSessionData>): Promise<SessionDetail> {
    return apiService.put<SessionDetail>(`/sessions/${sessionId}`, data);
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  async deleteSession(sessionId: number): Promise<void> {
    return apiService.delete<void>(`/sessions/${sessionId}`);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –º–µ–Ω—Ç–æ—Ä–∞
  async getMentorSessions(mentorId: number): Promise<MediaFile[]> {
    return apiService.get<MediaFile[]>(`/admin/mentors/${mentorId}/sessions`);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–Ω—Ç–æ—Ä–µ
  async getMentorDetail(mentorId: number): Promise<any> {
    return apiService.get<any>(`/admin/mentors/${mentorId}`);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–µ–Ω—Ç–æ—Ä–∞
  async getMentorProgress(mentorId: number): Promise<any> {
    return apiService.get<any>(`/admin/mentors/${mentorId}/progress`);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getStats(): Promise<any> {
    return apiService.get<any>('/analytics/dashboard');
  }

  // Analytics API methods (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç web –≤–µ—Ä—Å–∏–∏)
  async getDashboardStats(organizationId?: number): Promise<any> {
    const params = organizationId ? `?organizationId=${organizationId}` : '';
    return apiService.get<any>(`/analytics/dashboard${params}`);
  }

  async getMonthlyTrends(months: number = 6, organizationId?: number): Promise<any[]> {
    const params = new URLSearchParams();
    params.append('months', months.toString());
    if (organizationId) {
      params.append('organizationId', organizationId.toString());
    }
    return apiService.get<any[]>(`/analytics/trends?${params}`);
  }

  async getTopPerformers(limit: number = 5, organizationId?: number): Promise<any[]> {
    const params = new URLSearchParams();
    params.append('limit', limit.toString());
    if (organizationId) {
      params.append('organizationId', organizationId.toString());
    }
    return apiService.get<any[]>(`/analytics/top-performers?${params}`);
  }

  async getAnalyticsInsights(organizationId?: number): Promise<any[]> {
    const params = organizationId ? `?organizationId=${organizationId}` : '';
    return apiService.get<any[]>(`/analytics/insights${params}`);
  }

  async getCriteriaAnalysis(organizationId?: number): Promise<any[]> {
    const params = organizationId ? `?organizationId=${organizationId}` : '';
    return apiService.get<any[]>(`/analytics/criteria${params}`);
  }

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏/–∞–Ω–∞–ª–∏–∑–∞
  async monitorUploadProgress(fileId: number): Promise<UploadProgress> {
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–ø—Ä–æ–≥—Ä–µ—Å—Å
    if (fileId < 1000) { // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –º–æ–∫-—Ñ–∞–π–ª—ã –∏–º–µ—é—Ç ID < 1000
      return {
        fileId,
        status: 'completed',
        progress: 100,
        stage: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
        error: null,
        result: {
          transcription: '–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è...',
          analysis: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ—Å—Å–∏–∏',
          insights: ['–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ', '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è'],
          competencies: {
            communication: 85,
            leadership: 78,
            problemSolving: 92,
            teamwork: 88
          }
        }
      };
    }
    
    return apiService.get<UploadProgress>(`/upload/${fileId}/progress`);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
  async getRecommendations(fileId: number): Promise<string[]> {
    return apiService.get<string[]>(`/analysis/${fileId}/recommendations`);
  }

  // –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
  async exportAnalysis(fileId: number, format: 'pdf' | 'json' | 'csv' = 'pdf'): Promise<Blob> {
    const response = await apiService.get(`/analysis/${fileId}/export?format=${format}`, {
      responseType: 'blob',
    });
    return response;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤
  async getAnalysisHistory(limit: number = 10, offset: number = 0): Promise<MediaFile[]> {
    return apiService.get<MediaFile[]>(`/analysis/history?limit=${limit}&offset=${offset}`);
  }

  // –ü–æ–∏—Å–∫ —Å–µ—Å—Å–∏–π
  async searchSessions(query: string, filters?: {
    dateFrom?: string;
    dateTo?: string;
    scoreMin?: number;
    scoreMax?: number;
    status?: string;
  }): Promise<MediaFile[]> {
    const params = new URLSearchParams();
    params.append('q', query);
    
    if (filters?.dateFrom) params.append('dateFrom', filters.dateFrom);
    if (filters?.dateTo) params.append('dateTo', filters.dateTo);
    if (filters?.scoreMin) params.append('scoreMin', filters.scoreMin.toString());
    if (filters?.scoreMax) params.append('scoreMax', filters.scoreMax.toString());
    if (filters?.status) params.append('status', filters.status);

    return apiService.get<MediaFile[]>(`/sessions/search?${params.toString()}`);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
  async getAnalytics(period: 'week' | 'month' | 'quarter' | 'year' = 'month'): Promise<{
    period: string;
    totalSessions: number;
    averageScore: number;
    scoreDistribution: { score: number; count: number }[];
    trends: { date: string; score: number; sessions: number }[];
  }> {
    return apiService.get<any>(`/analytics?period=${period}`);
  }
}

export const sessionService = new SessionService();


